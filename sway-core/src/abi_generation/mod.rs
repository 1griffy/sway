pub mod evm_json_abi;
pub mod fuel_json_abi;

use crate::{
    asm_generation::{FinalizedAsm, ProgramABI},
    build_config::BuildTarget,
    language::ty::TyProgram,
    TypeEngine,
};

/// Generate the program ABI for the specified target.
pub fn program_abi(
    target: &BuildTarget,
    ty_program: &TyProgram,
    ty_engine: &TypeEngine,
    finalized_asm: &FinalizedAsm,
) -> ProgramABI {
    match target {
        BuildTarget::Fuel => {
            let abi = fuel_json_abi::generate_json_abi_program(ty_program, ty_engine, &mut vec![]);
            ProgramABI::Fuel(abi)
        }
        BuildTarget::EVM => {
            // Merge the ABI output of ASM gen with ABI gen to handle internal constructors
            // generated by the ASM backend.
            let mut ops = match &finalized_asm.abi {
                Some(ProgramABI::Evm(ops)) => ops.clone(),
                Some(_) => panic!("Specified EVM, but provided finalized ASM for different target"),
                None => vec![],
            };
            let abi = evm_json_abi::generate_json_abi_program(ty_program, ty_engine);
            ops.extend(abi);
            ProgramABI::Evm(ops)
        }

        BuildTarget::MidenVM => ProgramABI::MidenVM(()),
    }
}
